
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Consultant, createConsultant } from "@/utils/consultants";
import { supabase } from "@/integrations/supabase/client";

interface ConsultantFormProps {
  onSuccess: (consultant: Consultant) => void;
  onCancel: () => void;
}

interface FormErrors {
  [key: string]: string;
}

const ConsultantForm = ({ onSuccess, onCancel }: ConsultantFormProps) => {
  const [formData, setFormData] = useState({
    name: "",
    specialization: "",
    hourly_rate: "1000",
    experience: "0",
    bio: "",
    is_available: true,
    available_days: []
  });
  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: "" }));
    }
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: "" }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    
    if (!formData.name.trim()) {
      newErrors.name = "Name is required";
    }
    
    if (!formData.specialization) {
      newErrors.specialization = "Specialization is required";
    }
    
    const hourlyRate = parseFloat(formData.hourly_rate);
    if (isNaN(hourlyRate) || hourlyRate <= 0) {
      newErrors.hourly_rate = "Hourly rate must be a positive number";
    }
    
    const experience = parseInt(formData.experience);
    if (isNaN(experience) || experience < 0) {
      newErrors.experience = "Experience must be a non-negative number";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Check for duplicate names
      const { data: existingConsultants } = await supabase
        .from('consultants')
        .select('name')
        .eq('name', formData.name);
      
      if (existingConsultants && existingConsultants.length > 0) {
        setErrors({ name: "A consultant with this name already exists" });
        return;
      }
      
      // Create the consultant
      const newConsultant = await createConsultant({
        profile_id: "", // will be generated by the API
        name: formData.name,
        specialization: formData.specialization,
        hourly_rate: parseFloat(formData.hourly_rate),
        experience: parseInt(formData.experience),
        bio: formData.bio,
        is_available: formData.is_available,
        available_days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
        profile_picture: null
      });
      
      toast({
        title: "Success",
        description: "Consultant created successfully",
      });
      
      onSuccess(newConsultant);
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to create consultant",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="name">
            Name <span className="text-red-500">*</span>
          </Label>
          <Input
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            placeholder="Full name"
            className={errors.name ? "border-red-500" : ""}
          />
          {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="specialization">
            Specialization <span className="text-red-500">*</span>
          </Label>
          <Select
            value={formData.specialization}
            onValueChange={(value) => handleSelectChange("specialization", value)}
          >
            <SelectTrigger id="specialization" className={errors.specialization ? "border-red-500" : ""}>
              <SelectValue placeholder="Select specialization" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="mental_health">Mental Health</SelectItem>
              <SelectItem value="legal">Legal</SelectItem>
              <SelectItem value="relationship">Relationship</SelectItem>
              <SelectItem value="family">Family</SelectItem>
            </SelectContent>
          </Select>
          {errors.specialization && (
            <p className="text-red-500 text-sm">{errors.specialization}</p>
          )}
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="hourly_rate">
            Hourly Rate (â‚¹) <span className="text-red-500">*</span>
          </Label>
          <Input
            id="hourly_rate"
            name="hourly_rate"
            type="number"
            value={formData.hourly_rate}
            onChange={handleChange}
            placeholder="1000"
            className={errors.hourly_rate ? "border-red-500" : ""}
          />
          {errors.hourly_rate && (
            <p className="text-red-500 text-sm">{errors.hourly_rate}</p>
          )}
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="experience">Experience (years)</Label>
          <Input
            id="experience"
            name="experience"
            type="number"
            value={formData.experience}
            onChange={handleChange}
            placeholder="0"
            className={errors.experience ? "border-red-500" : ""}
          />
          {errors.experience && (
            <p className="text-red-500 text-sm">{errors.experience}</p>
          )}
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="bio">Bio / Description</Label>
        <Textarea
          id="bio"
          name="bio"
          value={formData.bio}
          onChange={handleChange}
          placeholder="Describe the consultant's experience and expertise..."
          className="min-h-[120px]"
        />
      </div>
      
      <div className="flex justify-end gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          ) : (
            "Add Consultant"
          )}
        </Button>
      </div>
    </form>
  );
};

export default ConsultantForm;
